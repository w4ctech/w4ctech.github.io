(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{310:function(e,r,n){"use strict";n.r(r);var t=n(17),s=Object(t.a)({},(function(){var e=this,r=e.$createElement,n=e._self._c||r;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h4",{attrs:{id:"添加依赖"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#添加依赖","aria-hidden":"true"}},[e._v("#")]),e._v(" 添加依赖")]),e._v(" "),n("pre",[n("code",[e._v("compile 'io.reactivex.rxjava2:rxandroid:2.0.1'\ncompile 'io.reactivex.rxjava2:rxjava:2.0.1'\n")])]),e._v(" "),n("hr"),e._v(" "),n("pre",[n("code",[e._v("compile 'io.reactivex.rxjava2:rxandroid:2.1.0'\ncompile 'io.reactivex.rxjava2:rxjava:2.2.3'\n")])]),e._v(" "),n("h4",{attrs:{id:"创建数据源（被观察者-可观察者）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建数据源（被观察者-可观察者）","aria-hidden":"true"}},[e._v("#")]),e._v(" 创建数据源（被观察者/可观察者）")]),e._v(" "),n("h6",{attrs:{id:"just-方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#just-方法","aria-hidden":"true"}},[e._v("#")]),e._v(" just 方法")]),e._v(" "),n("blockquote",[n("p",[e._v("返回一个可观察对象，该对象发出给定(常量引用)项的信号，然后完成")])]),e._v(" "),n("pre",[n("code",[e._v('Observable.just(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n.subscribe(new Consumer<Integer>() {\n    @Override\n    public void accept(Integer integer) throws Exception {\n        System.out.println("just：" + integer);\n    }\n});\n')])]),e._v(" "),n("hr"),e._v(" "),n("pre",[n("code",[e._v("just：1\njust：2\njust：4\njust：5\njust：6\njust：7\njust：8\njust：9\njust：10\n")])]),e._v(" "),n("h6",{attrs:{id:"fromarray-方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#fromarray-方法","aria-hidden":"true"}},[e._v("#")]),e._v(" fromArray 方法")]),e._v(" "),n("blockquote",[n("p",[e._v("fromArray 和 Just 几乎是一样的效果，只不过 Just 限制 10 个以内，而 fromArray 并没有限制，查看得知 单个参数 Just 是自行创建 ObservableJust，而多个参数 Just 最终还是回调了 fromArray，这里不再过多演示")])]),e._v(" "),n("h6",{attrs:{id:"create-方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#create-方法","aria-hidden":"true"}},[e._v("#")]),e._v(" create 方法")]),e._v(" "),n("pre",[n("code",[e._v('Observable.create(new ObservableOnSubscribe<Integer>() {\n\n    @Override\n    public void subscribe(ObservableEmitter<Integer> emitter) throws Exception {\n        //执行多次\n        emitter.onNext(1);\n        emitter.onNext(2);\n        emitter.onNext(3);\n        //标记事件结束\n        emitter.onComplete();\n        //标记事件发送错误\n        //emitter.onError(new NullPointerException("不能为空"));\n    }\n}).subscribe(new Consumer<Integer>() {\n\n    @Override\n    public void accept(Integer integer) throws Exception {\n        System.out.println("create：" + integer);\n    }\n});\n')])]),e._v(" "),n("hr"),e._v(" "),n("pre",[n("code",[e._v("create：1\ncreate：2\ncreate：3\n")])]),e._v(" "),n("h6",{attrs:{id:"range-方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#range-方法","aria-hidden":"true"}},[e._v("#")]),e._v(" range 方法")]),e._v(" "),n("blockquote",[n("p",[e._v("使用范围数据，指定输出数据的范围（1-40的数值）")])]),e._v(" "),n("pre",[n("code",[e._v('Observable.range(3, 5)\n.subscribe(new Consumer<Integer>() {\n    @Override\n    public void accept(Integer integer) throws Exception {\n        System.out.println("range：" + integer);\n    }\n});\n')])]),e._v(" "),n("hr"),e._v(" "),n("pre",[n("code",[e._v("range：3\nrange：4\nrange：5\nrange：6\nrange：7\n")])]),e._v(" "),n("h6",{attrs:{id:"interval-方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#interval-方法","aria-hidden":"true"}},[e._v("#")]),e._v(" interval 方法")]),e._v(" "),n("blockquote",[n("p",[e._v("指定某一时刻进行数据发送")])]),e._v(" "),n("pre",[n("code",[e._v('Observable.interval(10, 1, TimeUnit.SECONDS) // 先等待 10 秒，之后再每一秒发送一次，10 秒这个参数也可以不填，默认用间隔时间参数替代（这里示例 1 秒）\n.subscribe(new Consumer<Long>() {\n    @Override\n    public void accept(Long l) throws Exception {\n        System.out.println("interval：" + l);\n    }\n});\n')])]),e._v(" "),n("hr"),e._v(" "),n("pre",[n("code",[e._v("2019-03-20 15:30:33.331 interval：0\n2019-03-20 15:30:34.331 interval：1\n2019-03-20 15:30:35.331 interval：2\n2019-03-20 15:30:36.331 interval：3\n2019-03-20 15:30:37.331 interval：4\n2019-03-20 15:30:38.331 interval：5\n..................................\n")])]),e._v(" "),n("h4",{attrs:{id:"创建事件的接收者（观察者-订阅者），onnext方法中的数据类型必须被观察者指定的泛型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建事件的接收者（观察者-订阅者），onnext方法中的数据类型必须被观察者指定的泛型","aria-hidden":"true"}},[e._v("#")]),e._v(" 创建事件的接收者（观察者|订阅者），onNext方法中的数据类型必须被观察者指定的泛型")]),e._v(" "),n("pre",[n("code",[e._v("// 表示观察者不对被观察者发送的事件作出任何响应（但被观察者还是可以继续发送事件）\npublic final Disposable subscribe() {}\n\n// 表示观察者只对被观察者发送的Next事件作出响应\npublic final Disposable subscribe(Consumer<? super T> onNext) {}\n\n// 表示观察者只对被观察者发送的Next事件 & Error事件作出响应\npublic final Disposable subscribe(Consumer<? super T> onNext, Consumer<? super Throwable> onError) {} \n\n// 表示观察者只对被观察者发送的Next事件、Error事件 & Complete事件作出响应\npublic final Disposable subscribe(Consumer<? super T> onNext, Consumer<? super Throwable> onError, Action onComplete) {}\n\n// 表示观察者只对被观察者发送的Next事件、Error事件 、Complete事件 & onSubscribe事件作出响应\npublic final Disposable subscribe(Consumer<? super T> onNext, Consumer<? super Throwable> onError, Action onComplete, Consumer<? super Disposable> onSubscribe) {}\n\n// 表示观察者对被观察者所有的事件做出响应\npublic final void subscribe(Observer<? super T> observer) {}\n")])]),e._v(" "),n("h6",{attrs:{id:"observer-类用法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#observer-类用法","aria-hidden":"true"}},[e._v("#")]),e._v(" Observer 类用法")]),e._v(" "),n("blockquote",[n("p",[e._v("onSubscribe：订阅的时候被调用，方法参数有 Disposable，可用于取消订阅")])]),e._v(" "),n("blockquote",[n("p",[e._v("onNext(T item)：Observable调用这个方法发射数据，方法的参数就是Observable发射的数据，这个方法可能会被调用多次，取决于业务逻辑")])]),e._v(" "),n("blockquote",[n("p",[e._v("onCompleted()：正常终止，在没有遇到错误的情况下，Observable在最后一次调用onNext之后调用此方法")])]),e._v(" "),n("blockquote",[n("p",[e._v("onError(Throwable e)：当Observable遇到错误或者无法返回期望的数据时会调用这个方法，这个调用会终止Observable，后续不会再调用onNext和onCompleted，onError方法的参数是抛出异常")])]),e._v(" "),n("pre",[n("code",[e._v('//观察者\nObservable.just(1, 2, 3)\n.subscribe(new Observer<Integer>() {\n\n    @Override\n    public void onSubscribe(Disposable d) {\n        System.out.println("onSubscribe");\n    }\n\n    @Override\n    public void onNext(Integer integer) {\n        System.out.println("onNext：" + integer);\n    }\n\n    @Override\n    public void onError(Throwable e) {\n        System.out.println("onError：" + e.toString());\n    }\n\n    @Override\n    public void onComplete() {\n        System.out.println("onComplete");\n    }\n});\n')])]),e._v(" "),n("hr"),e._v(" "),n("pre",[n("code",[e._v("onSubscribe\nonNext：1\nonNext：2\nonNext：3\nonComplete\n")])]),e._v(" "),n("h6",{attrs:{id:"consumer-类用法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#consumer-类用法","aria-hidden":"true"}},[e._v("#")]),e._v(" Consumer 类用法")]),e._v(" "),n("pre",[n("code",[e._v('Observable.just(1, 2, 3)\n.subscribe(new Consumer<Integer>() {\n    @Override\n    public void accept(Integer integer) throws Exception {\n        System.out.println("accept：" + integer);\n    }\n});\n')])]),e._v(" "),n("hr"),e._v(" "),n("pre",[n("code",[e._v("accept：1\naccept：2\naccept：3\n")])]),e._v(" "),n("h4",{attrs:{id:"订阅"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#订阅","aria-hidden":"true"}},[e._v("#")]),e._v(" 订阅")]),e._v(" "),n("pre",[n("code",[e._v("// 订阅事件，被观察者必须指定了事件的接收者（观察者），整个事件流程才可以被启动\nDisposable disposable = observable.subscribe(observer);\n")])]),e._v(" "),n("hr"),e._v(" "),n("pre",[n("code",[e._v("// 是否被订阅\ndisposable.isDisposed();\n")])]),e._v(" "),n("hr"),e._v(" "),n("pre",[n("code",[e._v("// 取消订阅\ndisposable.dispose();\n")])])])}),[],!1,null,null,null);r.default=s.exports}}]);